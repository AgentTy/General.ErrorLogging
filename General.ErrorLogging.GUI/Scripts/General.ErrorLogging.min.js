!function (e) { function t(t, o, n, r, i, a) { var s = new ErrorLogger.EventContextModel(t, o, n); s.Details = r, s.ShouldNotifyListener = a, i && (ErrorLogger.AppContext.CustomID = i); try { ErrorLogger.ReportEvent(s) } catch (l) { "undefined" != typeof console && e.DoConsole && console.log(l) } } function o(t, o, n, r, i) { var a; a = "undefined" != typeof i && null != i ? ErrorLogger.ReadError(i) : ErrorLogger.EventContextModel(t, ErrorLogger.EventTypes.Javascript), a.ShouldNotifyListener = !0; try { n && (a.LineNumber = parseInt(n)), r && (a.ColumnNumber = parseInt(r)) } catch (s) { "undefined" != typeof console && e.DoConsole && console.log(s) } try { if (a.FileName = p(o), a.FileName.indexOf("General.ErrorLogging.js") > -1) { if (x++ , x > 1) return } else x = 0 } catch (s) { "undefined" != typeof console && e.DoConsole && console.log(s) } try { ErrorLogger.ReportEvent(a) } catch (s) { "undefined" != typeof console && e.DoConsole && console.log(s) } } function n() { var t = null; t = localStorage.getItem(N); try { t = t ? JSON.parse(t) : null } catch (o) { t = null, "undefined" != typeof console && e.DoConsole && console.log(o) } return t && "undefined" != typeof t.Filters ? (ErrorLogger.Filters = t.Filters, t) : ("undefined" != typeof console && e.DoConsole && console.log("filterContext load failed", t), null) } function r() { u(ErrorLogger.APIActionPath_GetFilters, { AccessCode: D, AppContext: ErrorLogger.AppContext }, function (e) { ErrorLogger.Filters = e, I && s(e) }, function () { "undefined" != typeof console && e.DoConsole && console.log("Unable to load error logging filters") }) } function a(t) { try { var o = new Date - new Date(t.Time); return o > e.PollingInterval } catch (n) { return "undefined" != typeof console && e.DoConsole && console.log(n), !0 } } function s(e) { var t = { Filters: e, Time: new Date }; localStorage.setItem(N, JSON.stringify(t)) } function l() { T = setInterval(function () { ErrorLogger.LoadFilters() }, ErrorLogger.PollingInterval) } function c() { clearInterval(T) } function u(t, o, n, r) { jQuery.support.cors = !0, $.ajax({ type: "POST", url: ErrorLogger.APIEndpoint + t, data: JSON.stringify(o), dataType: "json", contentType: "application/json; charset=utf-8", timeout: 2e4, success: function (e, t, o) { n && n(e, t, o) }, error: function (t, o, n) { "undefined" != typeof console && e.DoConsole && console.log("Could not post to ErrorLogging database: " + t.status + " " + t.statusText + "\r\n" + t.responseText), r && r(t, o, n) } }) } function p(e) { try { var t = e.replace("http://", "").replace("https://", "").split("/"), o = ""; for (i = 1; i < t.length; i++)o += "/", o += t[i]; return "" == o && (o = "/"), o } catch (n) { return e } } function d(e) { var t, o = e.match(/\((.*?)\)\n/); o && o.length > 0 ? t = o[0].substr(1, o[0].length - 3) : (o = e.match(/^@(.*?)\n/), o && o.length > 0 ? t = o[0].substr(1, o[0].length - 2) : (o = e.match(/^http(.*?)\n/), o && o.length > 0 && (t = o[0]))); var n; if (o = e.match(/.*at [^\s]*/), o && o.length > 0) { var r = o[0].indexOf("at ") + 3; n = o[0].substr(r, o[0].length - r) } if (t) { var i = p(t).split(":"), a = i[0], s = i[1], l = i[2]; return { MethodName: n, FileInfo: t, FileName: a, LineNumber: s, ColumnNumber: l } } return { MethodName: n, FileInfo: null, FileName: null, LineNumber: null, ColumnNumber: null } } function v() { var t = { Last: null, History: [] }, o = null; if (e.LocalHistoryEnabled) { if (I) { o = localStorage.getItem(S); try { o = o ? JSON.parse(o) : null } catch (n) { o = null, "undefined" != typeof console && e.DoConsole && console.log(n) } if (o && "undefined" != typeof o.History) return void (e.EventHistory = o) } o = m(S); try { o = o ? JSON.parse(o) : t } catch (n) { o = t, "undefined" != typeof console && e.DoConsole && console.log(n) } o && "undefined" == typeof o.History ? o = t : o && o.Last && "undefined" == typeof o.Last.Name && (o = f(o)) } o ? e.EventHistory = o : e.EventHistory = t } function g(t, o) { !I && o && o.length > 60 ? o = o.substr(0, 57) + "..." : I && o && o.length > 300 && (o = o.substr(0, 297) + "..."); var n = { IC: t, Name: o, Time: new Date }; e.EventHistory.Last = n, e.EventHistory.History.unshift(n), e.EventHistory.History.length > (I ? e.LocalHistoryMax : e.LocalHistoryMax / 2) && e.EventHistory.History.pop(), e.LocalHistoryEnabled && (I ? (localStorage.setItem(S, JSON.stringify(e.EventHistory)), h(S, JSON.stringify(y(e.EventHistory)), e.HistoryCookieDays)) : h(S, JSON.stringify(e.EventHistory), e.HistoryCookieDays)) } function y(e) { var t = { Last: null, History: [] }; return $.each(e.History, function (o) { var n = e.History[o]; t.History.push(n.IC), e.Last && (t.Last = e.Last.IC) }), t } function f(e) { var t = { Last: null, History: [] }; return t.Last = { IC: e.Last, Name: null, Time: null }, $.each(e.History, function (o) { var n = e.History[o]; t.History.push({ IC: n, Name: null, Time: null }) }), t } function E() { var e = "testls321"; try { return localStorage.setItem(e, e), localStorage.removeItem(e), !0 } catch (t) { return !1 } } function m(e, t) { return t = document.cookie.match("(^|;)\\s*" + e + "\\s*=\\s*([^;]+)"), t ? decodeURIComponent(t.pop()) : "" } function h(t, o, n) { var r; if (n) { var i = new Date; i.setTime(i.getTime() + 24 * n * 60 * 60 * 1e3), r = "; expires=" + i.toGMTString() } else r = ""; var a = t + "=" + encodeURIComponent(o) + r + "; path=/"; a += e.CookieDomain ? "; domain=." + e.CookieDomain + "; path=/" : "; path=/", document.cookie = a } var L = "/api/[AppID]/ErrorLog/RecordEvent/", C = "/api/[AppID]/LoggingFilter/ActiveFiltersInContext", A = "/Lookup?IC=[IncidentCode]", S = "GenErrLogHist", N = "GenErrLogFilters", D = "", I = E(); e.DoConsole = !0, e.LocalHistoryEnabled = !0, e.LocalHistoryMax = 30, e.CookieDomain = null, e.HistoryCookieDays = 60, e.PollingInterval = 3e5, e.APIEndpoint = null, e.APIActionPath_RecordEvent = null, e.APIActionPath_GetFilters = null, e.LastEvent = null, e.EventHistory = null, e.Active = !1, e.Filters = null, e.Listener = null, e.EventTypes = { Server: "Server", SQL: "SQL", SQLConnectivity: "SQLConnectivity", SQLTimeout: "SQLTimeout", Javascript: "Javascript", Warning: "Warning", Audit: "Audit", Trace: "Trace", Auth: "Auth", Properties: { Server: { Name: "Server", Value: 1, Description: "Managed Code errors and other server side exceptions" }, SQL: { Name: "SQL", Value: 2, Description: "SQL Server errors" }, SQLConnectivity: { Name: "SQL Connectivity", Value: 3, Description: "SQL Server connectivity errors" }, SQLTimeout: { Name: "SQL Timeout", Value: 4, Description: "SQL Server timeouts" }, Javascript: { Name: "Javascript", Value: 6, Description: "Client side javascript errors" }, Warning: { Name: "Warning", Value: 10, Description: "A warning level trace record" }, Audit: { Name: "Audit", Value: 11, Description: "An audit level trace record" }, Trace: { Name: "Trace", Value: 12, Description: "A trace record" }, Auth: { Name: "Auth", Value: 13, Description: "An authentication event" } } }, e.SeverityTypes = { Low: 1, Normal: 5, High: 10, Properties: { 1: { Name: "Low Severity", Value: 1, Description: "Low Severity Event" }, 5: { Name: "Normal Severity", Value: 5, Description: "Normal Severity Event" }, 10: { Name: "High Severity", Value: 10, Description: "High Severity Event" } } }, e.AppContextModel = function (e, t, o) { return { ClientID: null, UserType: null, UserID: null, CustomID: null, Custom1: null, Custom2: null, Custom3: null, AppID: e, AppName: t, Environment: o, Validate: function (e) { e || (e = this); var t = "", o = !0; return (!e.AppID && 0 != e.AppID || isNaN(e.AppID)) && (t += "AppContext.AppID is invalid. ", o = !1), e.Environment || (t += "AppContext.Environment is null. ", o = !1), /dev|1|qa|2|stage|3|customenv|4|live|5/.test(e.Environment.toLowerCase()) || (t += "AppContext.Environment is invalid. ", o = !1), { isValid: o, detail: t } } } }, e.AppContext = e.AppContextModel(), e.EventContextModel = function (e, t, o) { return { EventType: t, Severity: o, ErrorCode: null, EventName: e, ExceptionType: null, MethodName: null, FileName: null, LineNumber: 0, ColumnNumber: 0, URL: window.location.href, UserAgent: navigator.userAgent, Details: null, Duration: null, ShouldNotifyListener: !1, SavedToDatabase: !1, IncidentCode: null, Validate: function (e) { e || (e = this); var t = "", o = !0; return e.EventName || (t += "Event Name is required", o = !1), { isValid: o, detail: t } } } }, e.RegisterApplication = function (e, t, o) { e && (e = e.replace(/\/+$/, "")), this.APIEndpoint = e, D = t, this.AppContext = o; var n = this.Ready(); if (!n.isReady) throw new Error(n.detail + " Event Logging cannot be started until a valid API Endpoint and Application Context have been set."); this.APIActionPath_RecordEvent = L.replace("[AppID]", this.AppContext.AppID), this.APIActionPath_GetFilters = C.replace("[AppID]", this.AppContext.AppID), this.LoadFilters(), l() }, e.ListenGlobal = function (e) { var t = this.Ready(); if (!t.isReady) throw new Error(t.detail + " Event Logging cannot be started until a valid API Endpoint and Application Context have been set via ErrorLogger.RegisterApplication."); window.onerror = o, this.Listener = e, this.Active = !0 }, e.Pause = function () { window.onerror = null, c(), this.Active = !1 }, e.Resume = function () { window.onerror = o, l(), this.Active = !0 }, e.Ready = function () { var e = "", t = !0; if (this.APIEndpoint || (e += "APIEndpoint is invalid. ", t = !1), this.AppContext || (e += "AppContext is null. ", t = !1), this.AppContext && this.AppContext.Validate) { var o = this.AppContext.Validate(); o.isValid || (e += o.detail + "AppContext is invalid. ", t = !1) } else if (this.AppContext && !this.AppContext.Validate) { var o = this.AppContextModel().Validate(this.AppContext); o.isValid || (e += o.detail + "AppContext is invalid. ", t = !1) } return { isReady: t, detail: e } }, e.ReportError = function (e, o, n, r, i) { t(e, ErrorLogger.EventTypes.Javascript, o, n, r, i) }, e.ReportWarning = function (e, o, n, r) { t(e, ErrorLogger.EventTypes.Warning, o, n, r, !1) }, e.ReportAudit = function (e, o, n, r) { t(e, ErrorLogger.EventTypes.Audit, o, n, r, !1) }, e.ReportTrace = function (e, o, n, r) { t(e, ErrorLogger.EventTypes.Trace, o, n, r, !1) }, e.ReportEvent = function (e) { var t = ErrorLogger.ShouldStoreEvent(e); t.IShouldStoreEvent && ErrorLogger.StoreEvent(e, t) }; var x = 0; e.ReadError = function (e) { var t; if (null != e && "undefined" != typeof e && "undefined" != typeof e.message) { if (t = new ErrorLogger.EventContextModel(e.message, ErrorLogger.EventTypes.Javascript), e.name && (t.ExceptionType = e.name), t.Details = "", e.stack) { t.Details += "Stack: " + e.stack + "\r\n"; try { var o = d(e.stack); o && (o.MethodName && (t.MethodName = o.MethodName), o.FileName && (t.FileName = o.FileName), o.LineNumber && (t.LineNumber = o.LineNumber), o.ColumnNumber && (t.ColumnNumber = o.ColumnNumber)) } catch (n) { } } e.description && e.description != t.EventName && (t.Details += "Description: " + e.description + "\r\n"), e.toSource && (t.Details += "\r\n\r\nSource: " + e.toSource() + "\r\n"), e.toString && (t.Details += "\r\n\r\n " + e.toString() + "\r\n") } else t = new ErrorLogger.EventContextModel(e, ErrorLogger.EventTypes.Javascript); return t }, e.ShouldStoreEvent = function (e) { if (ErrorLogger.Filters && ErrorLogger.Filters.length > 0) { var t = !1, o = []; return $.each(ErrorLogger.Filters, function (n, r) { var i = !1; if (r.EventFilter.all) i = !0, o.push(r.ID); else if (r.EventFilter.events && r.EventFilter.events.length > 0) for (var a = 0; a < r.EventFilter.events.length; a++)r.EventFilter.events[a] == e.EventType && (i = !0, o.push(r.ID)); r.EventFilter.minseverity > 0 && (e.Severity ? e.Severity < r.EventFilter.minseverity && (i = !1) : i = !1), i && (t = !0) }), { IShouldStoreEvent: t, MatchedFilters: o } } return { IShouldStoreEvent: !0, MatchedFilters: [] } }, e.StoreEvent = function (t, o) { try { t.UserAgent || (t.UserAgent = navigator.userAgent), t.URL || (t.URL = window.location.href) } catch (n) { "undefined" != typeof console && e.DoConsole && console.log(n) } try { var r = null; try { e.LocalHistoryEnabled && (r = y(e.EventHistory)) } catch (n) { "undefined" != typeof console && e.DoConsole && console.log(n) } u(ErrorLogger.APIActionPath_RecordEvent, { AccessCode: D, EventContext: t, AppContext: ErrorLogger.AppContext, FilterContext: o, EventHistory: r }, function (e) { e.Success ? (t.SavedToDatabase = !0, t.IncidentCode = e.IncidentCode, g(e.IncidentCode, t.EventName)) : (t.SavedToDatabase = !1, console.log("An attempt was made to report an issue with this application but did not succeed due to a server side error."), g("unknown", t.EventName)), ErrorLogger.LastEvent = t, ErrorLogger.Listener && t.ShouldNotifyListener && ErrorLogger.Listener(t) }, function () { "undefined" != typeof console && e.DoConsole && console.log("An attempt was made to report an issue with this application but did not succeed due to a communication error.") }) } catch (n) { console.log("An attempt was made to report an issue with this application but did not succeed. (" + n.name + ")") } }, e.LoadFilters = function () { if (I) { var e = n(); e && !a(e) || r() } else r() }, e.DisplayHistory = function (t) { var o = 0, n = "tblGenErrLocalHistory", r = $('<table id="' + n + '"> <thead> <tr> <td colspan="3">Recent javascript errors/events recorded for this browser on this site are listed here. *requires cookies</td></tr><tr> <td>Time (local)</td><td>Incident Code</td><td>Name</td></tr></thead> <tbody> </tbody> </table>'), i = r.find("tbody")[0]; return e.EventHistory && e.EventHistory.History.length > 0 ? (o = e.EventHistory.History.length, $.each(e.EventHistory.History, function (t) { var o = e.EventHistory.History[t], n = $("<tr>"); if (o.Time) { var r = new Date(o.Time); $("<td>").text(r.toLocaleDateString() + " " + r.toLocaleTimeString()).appendTo(n) } else $("<td>").text("unknown").appendTo(n); "unknown" != o.IC && e.APIEndpoint ? $("<a>").attr("href", e.APIEndpoint + A.replace("[IncidentCode]", o.IC)).text(o.IC).appendTo($("<td>").appendTo(n)) : $("<td>").text(o.IC).appendTo(n), o.Name ? $("<td>").text(decodeURIComponent(o.Name)).appendTo(n) : $("<td>").text("unknown").appendTo(n), n.appendTo(i) })) : $('<tr> <td colspan="3">No events found, cookie expires after ' + e.HistoryCookieDays + " days</td> </tr>").appendTo(i), $("#" + n).remove(), t ? r.appendTo(t) : r.appendTo($("body")[0]), o }; var T; v() }(this.ErrorLogger = this.ErrorLogger || {});